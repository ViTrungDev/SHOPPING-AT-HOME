const logger = require("../../../Util/logger");
const User = require("../../Model/User_data/User");
const bcrypt = require("bcrypt");
const ResetPass = require("../../Model/User_data/ResetPass");
const fs = require("fs").promises;
const path = require("path");
const sendMail = require("../../../helper/sendMail");

class SendOTP {
  constructor() {
    this.sendOTP = this.sendOTP.bind(this); // üîπ Gi·ªØ ng·ªØ c·∫£nh c·ªßa `this`
  }

  //  T·∫°o m√£ OTP g·ªìm 6 ch·ªØ s·ªë
  generateOTP() {
    return Math.floor(100000 + Math.random() * 900000);
  }

  //  G·ª≠i OTP qua email
  async sendOTP(req, res) {
    try {
      const { email } = req.body;
      logger.info(`G·ª≠i m√£ OTP ƒë·∫øn email ${email}`);

      //  Ki·ªÉm tra xem email c√≥ t·ªìn t·∫°i kh√¥ng
      const user = await User.findOne({ email });
      if (!user)
        return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });

      //  T·∫°o OTP v√† m√£ h√≥a n√≥
      const otpCode = this.generateOTP();
      const hashedOTP = await bcrypt.hash(otpCode.toString(), 10);

      //  X√≥a OTP c≈© c·ªßa email n√†y (n·∫øu c√≥)
      await ResetPass.deleteOne({ email });

      //  L∆∞u OTP m·ªõi v√†o database, th·ªùi gian h·∫øt h·∫°n = hi·ªán t·∫°i + 1 ph√∫t
      await ResetPass.create({
        email,
        code: hashedOTP,
        expiresAt: new Date(Date.now() + 60 * 1000),
      });

      //  ƒê·ªçc n·ªôi dung email t·ª´ file HTML
      let emailHtml = await fs.readFile(
        path.join(
          __dirname,
          "../../../Resources/Views/Emails/resetPassword.html"
        ),
        "utf-8"
      );

      //  Thay th·∫ø n·ªôi dung {{otp}} v√† {{username}}
      emailHtml = emailHtml.replace("{{otp}}", otpCode);
      emailHtml = emailHtml.replace("{{username}}", user.username);

      //  G·ª≠i email
      await sendMail({
        email: email,
        subject: "M√£ x√°c nh·∫≠n kh√¥i ph·ª•c m·∫≠t kh·∫©u",
        html: emailHtml,
      });

      logger.info(`ƒê√£ g·ª≠i m√£ OTP ƒë·∫øn email ${email}`);
      res.json({ message: "M√£ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i qua email!" });
    } catch (error) {
      logger.error(`L·ªói g·ª≠i OTP: ${error.message}`);
      res.status(500).json({ message: "L·ªói khi g·ª≠i email" });
    }
  }
}

module.exports = new SendOTP();
